

services:
  # React Frontend (Production Mode)
  caching-editor:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: tesseract-caching-editor
    container_name: tesseract-caching-editor
    
    command: sh -c "npm run dev -- --host 0.0.0.0"
    #command: sleep infinity
    environment:
      - VITE_PROXY_TARGET=${CACHEFLOW_URL:-http://cacheflow:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
   
    networks:
      - proxy
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "-q", "-T", "10", "http://127.0.0.1:5173/health", "-O", "/dev/null"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.tesseract-caching-editor.entrypoints=websecure"
      - "traefik.http.routers.tesseract-caching-editor.tls=true"
      - "traefik.http.routers.tesseract-caching-editor.tls.certresolver=letsencrypt"
      - "traefik.http.routers.tesseract-caching-editor.rule=Host(`dev-caching-editor.pscx.ai`)"
      - "traefik.http.services.tesseract-caching-editor.loadbalancer.server.port=5173"
      - "traefik.http.routers.tesseract-caching-editor-http.entrypoints=web"
      - "traefik.http.routers.tesseract-caching-editor-http.rule=Host(`dev-caching-editor.pscx.ai`)"
      - "traefik.http.routers.tesseract-caching-editor-http.middlewares=redirect-to-https"

  # Production Proxy Server (Node.js)
  production-proxy:
    image: node:20-alpine
    container_name: tesseract-production-proxy
    ports:
      - "4011:4011"
    volumes:
      - ./proxy-server.js:/app/proxy-server.js:ro
      - ./package-proxy.json:/app/package.json:ro
      - ./openapi-spec.yaml:/app/openapi-spec.yaml:ro
    working_dir: /app
    command: sh -c "npm install && node proxy-server.js"
    environment:
      - CACHEFLOW_URL=https://dev-cacheflow.pscx.ai
      - PORT=4011
    networks:
      - proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4011/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    extra_hosts:
      - "host.docker.internal:host-gateway"
    

networks:
  proxy:
    external: true